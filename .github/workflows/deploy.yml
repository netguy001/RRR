name: Deploy Flask App to EC2

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build & push Docker image
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest

      # Deploy on EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            
            # Create required directories if they don't exist
            mkdir -p /home/ubuntu/data
            mkdir -p /home/ubuntu/uploads
            
            # Set proper permissions for ubuntu user
            sudo chown -R ubuntu:ubuntu /home/ubuntu/data || true
            sudo chown -R ubuntu:ubuntu /home/ubuntu/uploads || true
            
            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest
            
            # Stop and remove existing container gracefully
            if [ $(docker ps -q -f name=flaskapp) ]; then
                echo "Stopping existing flaskapp container..."
                docker stop flaskapp
            fi
            if [ $(docker ps -aq -f name=flaskapp) ]; then
                echo "Removing existing flaskapp container..."
                docker rm flaskapp
            fi
            
            # Run new container on dedicated port 8080
            docker run -d \
              --name flaskapp \
              -p 8080:5003 \
              -e FLASK_SECRET_KEY="${{ secrets.FLASK_SECRET_KEY }}" \
              -v /home/ubuntu/data:/app/data \
              -v /home/ubuntu/uploads:/app/static/uploads \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:5003/ || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest
            
            # Wait for container to start
            echo "Waiting for container to start..."
            sleep 15
            
            # Verify container is running
            if docker ps | grep flaskapp; then
                echo "‚úÖ Container is running successfully"
            else
                echo "‚ùå Container failed to start"
                docker logs flaskapp
                exit 1
            fi
            
            # Test if app is responding on port 8080
            echo "Testing application response..."
            for i in {1..5}; do
                if curl -f -s http://localhost:8080 > /dev/null; then
                    echo "‚úÖ Application is responding on port 8080"
                    break
                else
                    echo "‚è≥ Attempt $i: Application not ready yet, waiting..."
                    sleep 10
                fi
                if [ $i -eq 5 ]; then
                    echo "‚ùå Application failed to respond after 5 attempts"
                    echo "Container logs:"
                    docker logs flaskapp
                fi
            done
            
            echo "üöÄ Deployment completed! App should be accessible at http://your-server-ip:8080"