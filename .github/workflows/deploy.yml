name: Deploy Flask App to EC2

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Build & push Docker image
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: mega001
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build image
        run: docker build -t mega001/flaskapp:latest .

      - name: Push image
        run: docker push mega001/flaskapp:latest

      # Deploy with better key handling
      - name: Deploy to EC2
        run: |
          # Create SSH directory with proper permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write key with proper formatting
          cat > ~/.ssh/ec2_key << 'EOF'
          ${{ secrets.EC2_SSH_KEY }}
          EOF
          
          # Set proper permissions
          chmod 600 ~/.ssh/ec2_key
          
          # Ensure key ends with newline
          echo "" >> ~/.ssh/ec2_key
          
          # Add host to known_hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
          # Test connection with verbose output
          echo "Testing SSH connection..."
          ssh -v -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=~/.ssh/known_hosts -o ConnectTimeout=10 ec2-user@${{ secrets.EC2_HOST }} "echo 'Connection test successful'"
          
          # Deploy via SSH
          ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=~/.ssh/known_hosts ec2-user@${{ secrets.EC2_HOST }} << 'ENDSSH'
            set -e
            echo "Starting deployment..."
            
            # Create directories
            mkdir -p /home/ec2-user/data /home/ec2-user/uploads
            echo "Directories created"
            
            # Pull latest image
            echo "Pulling Docker image..."
            docker pull mega001/flaskapp:latest
            echo "Image pulled successfully"
            
            # Stop existing container
            echo "Stopping existing container..."
            docker stop flaskapp 2>/dev/null || echo "No existing container to stop"
            docker rm flaskapp 2>/dev/null || echo "No existing container to remove"
            
            # Run new container
            echo "Starting new container..."
            docker run -d \
              --name flaskapp \
              -p 8080:5003 \
              -e FLASK_SECRET_KEY="${{ secrets.FLASK_SECRET_KEY }}" \
              -v /home/ec2-user/data:/app/data \
              -v /home/ec2-user/uploads:/app/static/uploads \
              --restart unless-stopped \
              mega001/flaskapp:latest
            
            # Wait and verify
            echo "Waiting for container to start..."
            sleep 10
            
            if docker ps | grep flaskapp; then
              echo "SUCCESS: Container is running!"
              echo "Flask app is accessible on port 8080"
            else
              echo "ERROR: Container failed to start"
              docker logs flaskapp 2>/dev/null || echo "No logs available"
              exit 1
            fi
          ENDSSH
          
          # Cleanup
          rm -f ~/.ssh/ec2_key