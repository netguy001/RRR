name: Deploy Flask App to EC2

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Build & push Docker image
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest .

      - name: Push image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest

      # Deploy on EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            
            # Create required directories if they don't exist
            mkdir -p /home/ubuntu/data
            mkdir -p /home/ubuntu/uploads
            
            # Set proper permissions (ubuntu user should already own these)
            chown -R ubuntu:ubuntu /home/ubuntu/data 2>/dev/null || true
            chown -R ubuntu:ubuntu /home/ubuntu/uploads 2>/dev/null || true
            
            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest
            
            # Stop and remove existing container
            docker stop flaskapp || true
            docker rm flaskapp || true
            
            # Run new container on dedicated port 8080 (won't conflict with other sites)
            docker run -d \
              --name flaskapp \
              -p 8080:5003 \
              -e FLASK_SECRET_KEY="${{ secrets.FLASK_SECRET_KEY }}" \
              -v /home/ubuntu/data:/app/data \
              -v /home/ubuntu/uploads:/app/static/uploads \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest
            
            # Verify container is running
            sleep 5
            docker ps | grep flaskapp
            
            # Test if app is responding on port 8080
            sleep 10
            curl -f http://localhost:8080 || echo "Warning: App might not be responding yet, check logs with: docker logs flaskapp"